"PC9","PC10","PC11","PC12",
"PC13","PC14")
head(df_new)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 9\\ArtPiece.csv")
str(art)
install.packages("neuralnet")
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 9\\ArtPiece_1.csv")
str(art)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$IsGood.Purchase<-as.factor(art$IsGood.Purchase)
art$Art.Category<-as.factor(art$Art.Category)
art$Prominent.Color<-as.factor(art$Prominent.Color)
art$Brush<-as.factor(art$Brush)
art$Brush.Size<-as.factor(art$Brush.Size)
art$Brush.Finesse<-as.factor(art$Brush.Finesse)
art$Art.Nationality<-as.factor(art$Art.Nationality)
art$Top.3.artists<-as.factor(art$Top.3.artists)
art$GoodArt.check<-as.factor(art$GoodArt.check)
art$AuctionHouseGuarantee<-as.factor(art$AuctionHouseGuarantee)
art$Is.It.Online.Sale<-as.factor(art$Is.It.Online.Sale)
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\RDataMiningBlueprints_Code\\Chapter 9\\ArtPiece_1.csv")
str(art)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$IsGood.Purchase<-as.factor(art$IsGood.Purchase)
art$Art.Category<-as.factor(art$Art.Category)
art$Prominent.Color<-as.factor(art$Prominent.Color)
art$Brush<-as.factor(art$Brush)
art$Brush.Size<-as.factor(art$Brush.Size)
art$Brush.Finesse<-as.factor(art$Brush.Finesse)
art$Art.Nationality<-as.factor(art$Art.Nationality)
art$Top.3.artists<-as.factor(art$Top.3.artists)
art$GoodArt.check<-as.factor(art$GoodArt.check)
art$AuctionHouseGuarantee<-as.factor(art$AuctionHouseGuarantee)
art$Is.It.Online.Sale<-as.factor(art$Is.It.Online.Sale)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
View(art)
art<- read.csv("C:\Users\sandhyao\Desktop\R Data Mining Projects\Section_9")
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9")
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\ArtPiece_1.csv")
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\\ArtPiece_1.csv")
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\\ArtPiece_1.csv")
str(art)
library(neuralnet)
art<- read.csv("C:\\Users\\sandhyao\\Desktop\\R Data Mining Projects\\Section_9\\ArtPiece_1.csv")
str(art)
art$Art.Auction.House<-as.factor(art$Art.Auction.House)
art$IsGood.Purchase<-as.factor(art$IsGood.Purchase)
art$Art.Category<-as.factor(art$Art.Category)
art$Prominent.Color<-as.factor(art$Prominent.Color)
art$Brush<-as.factor(art$Brush)
art$Brush.Size<-as.factor(art$Brush.Size)
art$Brush.Finesse<-as.factor(art$Brush.Finesse)
art$Art.Nationality<-as.factor(art$Art.Nationality)
art$Top.3.artists<-as.factor(art$Top.3.artists)
art$GoodArt.check<-as.factor(art$GoodArt.check)
art$AuctionHouseGuarantee<-as.factor(art$AuctionHouseGuarantee)
art$Is.It.Online.Sale<-as.factor(art$Is.It.Online.Sale)
art$Critic.Ratings<-as.numeric(art$Critic.Ratings)
art$Acq.Cost<-as.numeric(art$Acq.Cost)
art$CurrentAuctionAveragePrice<-as.numeric(art$CurrentAuctionAveragePrice)
art$CollectorsAverageprice<-as.numeric(art$CollectorsAverageprice)
art$Min.Guarantee.Cost<-as.numeric(art$Min.Guarantee.Cost)
fun1<-function(x){
ifelse(x=="#VALUE!",NA,x)
}
art<-as.data.frame(apply(art,2,fun1))
art<-na.omit(art)
art<-art[,c("Art.Auction.House","IsGood.Purchase","Art.Category",
"Prominent.Color","Brush","Brush.Size","Brush.Finesse",
"Art.Nationality","Top.3.artists","GoodArt.check",
"AuctionHouseGuarantee","Is.It.Online.Sale","Critic.Ratings",
"Acq.Cost","CurrentAuctionAveragePrice","CollectorsAverageprice",
"Min.Guarantee.Cost")]
library(dummy)
install.packages("dummy")
library(dummy)
art_dummy<-dummy(art[,c("Art.Auction.House","IsGood.Purchase","Art.Category",
"Prominent.Color","Brush","Brush.Size","Brush.Finesse",
"Art.Nationality","Top.3.artists","GoodArt.check",
"AuctionHouseGuarantee","Is.It.Online.Sale")],int=F)
art_num<-art[,c("Critic.Ratings",
"Acq.Cost","CurrentAuctionAveragePrice","CollectorsAverageprice",
"Min.Guarantee.Cost")]
art<-cbind(art_num,art_dummy)
smp_size <- floor(0.70 * nrow(art))
set.seed(123)
train_ind <- sample(seq_len(nrow(art)), size = smp_size)
train <- art[train_ind, ]
test <- art[-train_ind,
]
fun2<-function(x){
as.numeric(x)
}
train<-as.data.frame(apply(train,2,fun2))
test<-as.data.frame(apply(test,2,fun2))
fit<- neuralnet(formula = CurrentAuctionAveragePrice ~ Critic.Ratings +
Acq.Cost + CollectorsAverageprice + Min.Guarantee.Cost,
data = train,hidden = 15, err.fct = "sse", linear.output = F)
fit
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
library(nnet)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
fit
plot(fit)
plot(fit)
plot(fit$CurrentAuctionAveragePrice~fit$Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost)
plot(fit$CurrentAuctionAveragePrice~fit$Critic.Ratings+fit$Acq.Cost+
fit$CollectorsAverageprice+fit$Min.Guarantee.Cost)
plot(fit$CurrentAuctionAveragePrice,fit$Critic.Ratings+fit$Acq.Cost+
fit$CollectorsAverageprice+fit$Min.Guarantee.Cost)
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
plot(fit$CurrentAuctionAveragePrice,fit$Critic.Ratings)
plot(fit$CurrentAuctionAveragePrice,fit$Critic.Ratings)
plot(fit)
plot(fit)
dev.off()
dev.off(fit)
par(mar=numeric(4),mfrow=c(1,2),family='serif')
plot(mod1,nid=F)
plot(fit,nid=F)
plot(fit)
plot(fit$all)
plot(fit)
plot(fit)
fit<-neuralnet(IsGood.Purchase_1~Brush.Size_1+Brush.Size_2+Brush.Size_3+
Brush.Finesse_Coarse+Brush.Finesse_Fine+
Art.Nationality_American+Art.Nationality_Asian+
Art.Nationality_European+GoodArt.check_YES,data=train[1:2000,],
hidden = 25,err.fct = "ce",linear.output = F)
fit
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
plot(output)
plot(fit)
fit.nnet<-nnet(factor(IsGood.Purchase_1)~Brush.Size_1+Brush.Size_2+Brush.Size_3+
Brush.Finesse_Coarse+Brush.Finesse_Fine+
Art.Nationality_American+Art.Nationality_Asian+
Art.Nationality_European+GoodArt.check_YES,data=train[1:2000,],
size=9)
fit.nnet
output<-cbind(fit$covariate,fit$result.matrix[[1]])
plot(fit)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
output<-cbind(fit$covariate,fit$result.matrix[[1]])
plot(fit)
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)>
plot(forecast(fit,10))
library(nnetar)
install.packages("nnetar")
library(nnetar)
help(nnetar)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)>
plot(forecast(fit,10))
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)
plot(forecast(fit,10))
summary(fit)
plot(AirPassengers,lwd=5)
library(forecast)
plot(AirPassengers,lwd=5)
fit<-nnetar(AirPassengers, p=9,P=,size = 10, repeats = 50,lambda = 0)
summary(fit)
plot(forecast(fit,10))
plot(forecast(fit,10))
plot.nnet(fit,wts.only=T)
library(devtools)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot.nnet(fit,wts.only=T)
plot.nnet(fit,wts.only=T)
plot(fit)
plot.nnet(fit,wts.only=T)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
plot(fit)
plot(fit)
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
fit<- neuralnet(formula = CurrentAuctionAveragePrice ~ Critic.Ratings +
Acq.Cost + CollectorsAverageprice + Min.Guarantee.Cost,
data = train,hidden = 15, err.fct = "sse", linear.output = F)
fit<- neuralnet(formula = CurrentAuctionAveragePrice ~ Critic.Ratings +
Acq.Cost + CollectorsAverageprice + Min.Guarantee.Cost,
data = train,hidden = 15, err.fct = "sse", linear.output = F)
fit
fit$result.matrix
output<-cbind(fit$covariate,fit$result.matrix[[1]])
head(output)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
plot(fit)
plot(fit)
View(art_num)
fit<-nnet(CurrentAuctionAveragePrice~Critic.Ratings+Acq.Cost+
CollectorsAverageprice+Min.Guarantee.Cost,data=train,
size=100)
plot(fit)
}
x = 2
if(x>3){
print("greater value")
}else {
print("lesser value")
}
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i]*y[i]
}
z[i]
}
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i]*y[i]
}
z[i] = x[i] * y[i]
}
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i] * y[i]
}
z=0
x = c(1:10)
y = c(1:10)
for(i in 1:10){
z[i] = x[i]*y[i]
}
z
install.packages(c("plotrix",
"RColorBrewer"))
library(plotrix)
library(RColorBrewer)
?plot
?plot()
x = c(1:5) # Numeric Vector
x
y ="I am Home" # Character Vector
y
c = c(1+3i) #complex vector
c
z = list(c(1:5),"I am Home") # List
z
z = c( 1,2,3, NA,5,NA) # NA in R is missing Data
z
is.na(z)
complete.cases(z)
clean <- complete.cases(z)
z[clean] # used to remove NA from data
0/0
m <- c(2/3,3/3,0/0)
m
is.finite(m)
is.infinite(m)
is.nan(m)
k = 1/0
k
dk=c(1,45,67,20)
anyNA(dk)
dk[3]=NA
anyNA(dk)
vec = c(1:10)
vec
mat = matrix(c(1,2,3,4,5,6,7,8,9,10),nrow = 2, ncol = 5)
mat
?matrix
t(mat) # transpose a matrix
d = diag(3) # generate an identity matrix
d
?diag
zro = matrix(rep(0,6),ncol = 2,nrow = 3 )# generate amatrix of Zeros
zro
mat = matrix(c(1:10),nrow = 2, ncol = 5)
mat
mat[2,3]
mat[2,3] = 16
mat[2,3]
mat[2, ]
install.packages("XML")
library(httr)
install.packages("XML")
library(httr)
install.packages("httr")
library(httr)
library(XML)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
install.packages("httr")
library(XML)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
xmldoc <- xmlParse(url)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
library(XML)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
library(httr)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
xmldoc <- xmlParse(url)
xmldoc <- xmlParse(url)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
url <- "https://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
library(httr)
url <- "https://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
url <- "http://www.w3schools.com/xml/cd_catalog.xml"
xmldoc <- xmlParse(url)
url <- "https://www.w3schools.com/xml/cd_catalog.xml"
library(RCurl)
install.packages("RCurl")
install.packages("RCurl")
install.packages("Rserve")
library(Rserve)
Rserve()
ds= c(cars,iris)
data(list= ds)
data(iris)
?cars
ds= c(datsets$cars,iris)
ds= c(datasets$cars,iris)
ds= c(cars,iris)
data(list= ds)
ds= c("cars","iris")
data(list= ds)
ds= c("cars","iris")
data(list= ds)
ds= c("cars","iris")
data(list= ds)
setwd("D:/R Data Analysis Solutions- ML Techniques/Section 1/data")
ds= c("cars","iris")
data(cars)
data("cars")
data(cars)
data(cars)
ds= c("cars","iris")
data(list= ds)
data(cars)
data(iris)
ds= c("cars","iris")
data(list= ds)
customer <- c("John", "Peter", "Jane")
orderdate <- as.Date(c('2014-10-1','2014-1-2','2014-7-6'))
orderamount <- c(280, 100.50, 40.25)
order <- data.frame(customer,orderdate,orderamount)
names <- c("John", "Joan")
save(order, names, file="test.Rdata")
saveRDS(order,file="order.rds")
remove(order)
load("test.Rdata")
ord <- readRDS("order.rds")
data(iris)
customer <- c("John", "Peter", "Jane")
orderdate <- as.Date(c('2014-10-1','2014-1-2','2014-7-6'))
orderamount <- c(280, 100.50, 40.25)
order <- data.frame(customer,orderdate,orderamount)
names <- c("John", "Joan")
save(order, names, file="test.Rdata")
saveRDS(order,file="order.rds")
remove(order)
load("test.Rdata")
ord <- readRDS("order.rds")
data(iris)
ds= c("cars","iris")
data(list= ds)
save.image(file = "all.RData")
odd <- c(1,3,5,7)
even <- c(2,4,6,8)
save(list=c("odd","even"),file="OddEven.Rdata")
load("D:/R Data Analysis Solutions- ML Techniques/Section 1/data/.RData")
customer <- c("John", "Peter", "Jane")
orderdate <- as.Date(c('2014-10-1','2014-1-2','2014-7-6'))
orderamount <- c(280, 100.50, 40.25)
order <- data.frame(customer,orderdate,orderamount)
names <- c("John", "Joan")
save(order, names, file="test.Rdata")
saveRDS(order,file="order.rds")
remove(order)
load("test.Rdata")
ord <- readRDS("order.rds")
data(iris)
ds= c("cars","iris")
data(list= ds)
save.image(file = "all.RData")
odd <- c(1,3,5,7)
even <- c(2,4,6,8)
save(list=c("odd","even"),file="OddEven.Rdata")
attach("order.Rdata")
attach("test.Rdata")
customer <- c("John", "Peter", "Jane")
orderdate <- as.Date(c('2014-10-1','2014-1-2','2014-7-6'))
orderamount <- c(280, 100.50, 40.25)
order <- data.frame(customer,orderdate,orderamount)
names <- c("John", "Joan")
save(order, names, file="test.Rdata")
saveRDS(order,file="order.rds")
remove(order)
load("test.Rdata")
ord <- readRDS("order.rds")
data(iris)
ds= c("cars","iris")
data(list= ds)
save.image(file = "all.RData")
odd <- c(1,3,5,7)
even <- c(2,4,6,8)
save(list=c("odd","even"),file="OddEven.Rdata")
attach("test.Rdata")
data()
setwd("D:/R Data Analysis Solutions- ML Techniques/Section 5/data")
install.packages("cluster")
install.packages("cluster")
auto <- read.csv("auto-mpg.csv")
rdacb.scale.many <- function (dat, column_nos) {
nms <- names(dat)
for (col in column_nos) {
name <- paste0(nms[col], "_z")
dat[name] <- scale(dat[, col])
}
cat(paste("Scaled", length(column_nos), "variable(s)\n"))
dat
}
auto <- rdacb.scale.many(auto, 2:7)
names(auto)
set.seed(1020)
fit <- kmeans(auto[, 10:15], 5)
fit
pairs(auto[,2:7], col=c(1:5)[fit$cluster])
library(cluster)
clusplot(auto[,10:15], fit$cluster, color = TRUE,
shade = TRUE, labels=0, lines=0)
rdacb.kmeans.plot <- function (data, num_clust = 15, seed = 9876) {
set.seed(seed)
ss <- numeric(num_clust)
ss[1] <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:num_clust) {
ss[i] <- sum(kmeans(data, centers = i)$withinss)
}
plot(1:num_clust, ss, type = "b", pch = 18, xlab = "# Clusters",
ylab = "Total within_ss across clusters")
}
rdacb.kmeans.plot(auto[,10:15])
clusplot(auto[,10:15], fit$cluster, color = TRUE,
shade = TRUE, labels=0, lines=0)
rdacb.kmeans.plot <- function (data, num_clust = 15, seed = 9876) {
set.seed(seed)
ss <- numeric(num_clust)
ss[1] <- (nrow(data) - 1) * sum(apply(data, 2, var))
for (i in 2:num_clust) {
ss[i] <- sum(kmeans(data, centers = i)$withinss)
}
plot(1:num_clust, ss, type = "b", pch = 18, xlab = "# Clusters",
ylab = "Total within_ss across clusters")
}
rdacb.kmeans.plot(auto[,10:15])
auto <- read.csv("auto-mpg.csv")
rdacb.scale.many <- function (dat, column_nos) {
nms <- names(dat)
for (col in column_nos) {
name <- paste0(nms[col], "_z")
dat[name] <- scale(dat[, col])
}
cat(paste("Scaled", length(column_nos), "variable(s)\n"))
dat
}
auto <- rdacb.scale.many(auto, 2:7)
names(auto)
dis <- dist(auto[,10:15], method = "euclidean")
fit <- hclust(dis, method = "ward")
plot(fit, labels = FALSE, hang = 0)
rect.hclust(fit, k=4, border="blue")
cluster <- cutree(fit, k=4)
cluster
bh <- read.csv("BostonHousing.csv")
names(bh)
round(cor(bh[,-14]),2)
plot(bh[,-14])
plot(bh[,-14])
bh.pca <- prcomp(bh[,-14], scale = TRUE)
print(bh.pca)
summary(bh.pca)
plot(bh.pca)
plot(bh.pca, type = "lines")
biplot(bh.pca, col = c("gray", "black"))
head(bh.pca$x, 3)
bh.pca$rotation
bh.pca$sdev
